const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length === 0) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node convert-folder.js <–ø—É—Ç—å_–∫_–ø–∞–ø–∫–µ> [–æ–ø—Ü–∏–∏]');
    console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node convert-folder.js models/5167939598143193218');
    console.log('  node convert-folder.js models/5167939598143193218 --output=custom_output');
    console.log('  node convert-folder.js models/5167939598143193218 --codec=vp8');
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:');
    console.log('  --output=<–ø–∞–ø–∫–∞>     –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./output)');
    console.log('  --codec=<vp9|vp8>    –í–∏–¥–µ–æ –∫–æ–¥–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: vp9)');
    console.log('  --bitrate=<—á–∏—Å–ª–æ>    –ë–∏—Ç—Ä–µ–π—Ç –≤ kbps (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5120)');
    console.log('  --speed=<—á–∏—Å–ª–æ>      –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)');
    console.log('  --width=<—á–∏—Å–ª–æ>      –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)');
    console.log('  --height=<—á–∏—Å–ª–æ>     –í—ã—Å–æ—Ç–∞ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)');
    process.exit(0);
}

const folderPath = args[0];

// –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ü–∏–π
const CONFIG = {
    modelsDir: folderPath,
    outputDir: './output',
    htmlPath: './convert-headless.html',
    codec: 'video/webm;codecs="vp9"', // VP9 —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é (–∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª)
    extension: '.webm',
    framerate: null,
    speed: 1,
    bitrate: 5120,
    width: null,
    height: null,
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
args.slice(1).forEach(arg => {
    if (arg.startsWith('--output=')) {
        CONFIG.outputDir = arg.substring(9);
    } else if (arg.startsWith('--codec=')) {
        const codec = arg.substring(8);
        if (codec === 'vp8') {
            CONFIG.codec = 'video/webm;codecs="vp8"';
        } else if (codec === 'vp9') {
            CONFIG.codec = 'video/webm;codecs="vp9"';
        }
    } else if (arg.startsWith('--bitrate=')) {
        CONFIG.bitrate = parseInt(arg.substring(10));
    } else if (arg.startsWith('--speed=')) {
        CONFIG.speed = parseFloat(arg.substring(8));
    } else if (arg.startsWith('--width=')) {
        CONFIG.width = parseInt(arg.substring(8));
    } else if (arg.startsWith('--height=')) {
        CONFIG.height = parseInt(arg.substring(9));
    }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
if (!fs.existsSync(folderPath)) {
    console.error(`–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ "${folderPath}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    process.exit(1);
}

// –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(CONFIG.outputDir)) {
    fs.mkdirSync(CONFIG.outputDir, { recursive: true });
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
function getJsonFiles(dir) {
    const files = fs.readdirSync(dir);
    return files
        .filter(file => file.endsWith('.json'))
        .map(file => path.join(dir, file));
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª
async function convertFile(browser, jsonFilePath, basePath) {
    const page = await browser.newPage();

    try {
        // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        const relativePath = path.relative(basePath, jsonFilePath);
        const outputPath = path.join(CONFIG.outputDir, relativePath).replace('.json', CONFIG.extension);

        // –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const outputDir = path.dirname(outputPath);
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }

        // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        if (fs.existsSync(outputPath)) {
            console.log(`  ‚è≠  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${path.basename(jsonFilePath)}`);
            await page.close();
            return { success: true, skipped: true };
        }

        console.log(`  üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: ${path.basename(jsonFilePath)}`);

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const htmlUrl = 'file:///' + path.resolve(CONFIG.htmlPath).replace(/\\/g, '/');
        await page.goto(htmlUrl, { waitForTimeout: 2000 });

        // –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        await page.waitForFunction(() => window.converterReady === true, { timeout: 10000 });

        // –ü—Ä–æ—á–∏—Ç–∞—Ç—å JSON —Ñ–∞–π–ª
        const jsonContent = fs.readFileSync(jsonFilePath, 'utf8');
        const jsonData = JSON.parse(jsonContent);

        // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
        const result = await page.evaluate(async(jsonData, options) => {
            try {
                const result = await window.convertLottieToVideo(jsonData, options);
                return result;
            } catch (error) {
                return { success: false, error: error.message };
            }
        }, jsonData, {
            width: CONFIG.width,
            height: CONFIG.height,
            framerate: CONFIG.framerate,
            speed: CONFIG.speed,
            mimeType: CONFIG.codec,
            bitrate: CONFIG.bitrate,
        });

        if (!result.success) {
            throw new Error(result.error);
        }

        const videoBlob = result.data;

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        const buffer = Buffer.from(videoBlob);
        fs.writeFileSync(outputPath, buffer);

        console.log(`  ‚úì  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${outputPath}`);
        await page.close();
        return { success: true, skipped: false };

    } catch (error) {
        console.error(`  ‚úó  –û—à–∏–±–∫–∞: ${error.message}`);
        await page.close();
        return { success: false, error: error.message };
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('=== Lottie to Video - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞–ø–∫–∏ ===\n');
    console.log(`–ü–∞–ø–∫–∞: ${folderPath}`);
    console.log(`–í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${CONFIG.outputDir}`);
    console.log(`–ö–æ–¥–µ–∫: ${CONFIG.codec}`);
    console.log(`–ë–∏—Ç—Ä–µ–π—Ç: ${CONFIG.bitrate} kbps\n`);

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ JSON —Ñ–∞–π–ª—ã
    const jsonFiles = getJsonFiles(folderPath);
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${jsonFiles.length}\n`);

    if (jsonFiles.length === 0) {
        console.log('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
        return;
    }

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä
    console.log('–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
    const browser = await puppeteer.launch({
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
        ],
    });

    console.log('–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω\n');
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é:\n');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let converted = 0;
    let skipped = 0;
    let failed = 0;

    const startTime = Date.now();

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
    for (let i = 0; i < jsonFiles.length; i++) {
        const jsonFile = jsonFiles[i];
        console.log(`[${i + 1}/${jsonFiles.length}]`);

        const result = await convertFile(browser, jsonFile, folderPath);

        if (result.success) {
            if (result.skipped) {
                skipped++;
            } else {
                converted++;
            }
        } else {
            failed++;
        }

        console.log('');
    }

    // –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
    await browser.close();

    const endTime = Date.now();
    const totalTime = ((endTime - startTime) / 1000).toFixed(2);

    // –ò—Ç–æ–≥–∏
    console.log('=== –ó–∞–≤–µ—Ä—à–µ–Ω–æ ===');
    console.log(`–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${converted}`);
    console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): ${skipped}`);
    console.log(`–û—à–∏–±–∫–∏: ${failed}`);
    console.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${jsonFiles.length}`);
    console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}s`);

    if (converted > 0) {
        const avgTime = (parseFloat(totalTime) / converted).toFixed(2);
        console.log(`–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ñ–∞–π–ª: ${avgTime}s`);
    }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å
main().catch(console.error);